---
- include_tasks: pre_check.yaml
- include_tasks: vault_status.yaml

# Unfortunately we cannot loop vault_status and just check if the vault is unsealed
# https://github.com/ansible/proposals/issues/136
# So here we keep running the 'vault status' command until sealed is set to false
- name: If the vault is still sealed we need to retry
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: vault status -format=json
  register: vault_status_json
  until: "'stdout' in vault_status_json and (not (vault_status_json.stdout | from_json)['sealed'] | bool)"
  retries: 20
  delay: 45
  failed_when: "'stdout_lines' not in vault_status_json"

- name: Check for existence of "{{ values_secret }}"
  ansible.builtin.stat:
    path: "{{ values_secret }}"
  register: result
  failed_when: not result.stat.exists

- name: Parse "{{ values_secret }}"
  ansible.builtin.set_fact:
    all_values: "{{ lookup('file', values_secret) | from_yaml | default({}, true) }}"

- name: Check for secrets keys
  ansible.builtin.assert:
    that:
      - "('secrets' in all_values.keys()) or ('files' in all_values.keys())"
    fail_msg: "Was not able to parse any secrets from file {{ values_secret }}. Either 'secrets:' or 'files:' top-level keys (or both) must exist"

- name: Set secrets and file_secrets facts
  ansible.builtin.set_fact:
    secrets: "{{ all_values['secrets'] | default({}) }}"
    file_secrets: "{{ all_values['files'] | default({}) }}"

- name: Verify we have any secrets at all
  ansible.builtin.fail:
    msg: "Was not able to parse any secrets from file {{ values_secret }}: {{ all_values }}"
  failed_when:
    secrets | combine(file_secrets) | length == 0

- name: Check the value-secret.yaml file for errors in the secrets section
  ansible.builtin.fail:
    msg: >
      "{{ item }}" is not properly formatted. Each key under 'secrets:'
      needs to point to a dictionary of key, value pairs. See values-secret.yaml.template.
  when: >
    item.key | length == 0 or
    item.value is not mapping
  loop:
    "{{ secrets | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Validate file references in the files section of value-secret.yaml
  ansible.builtin.stat:
    path: '{{ file_stat.value }}'
  register: file_values
  loop_control:
    loop_var: file_stat
  loop:
    "{{ file_secrets | dict2items }}"

- name: debug file_stat
  ansible.builtin.debug:
    var: file_stat
  when: debug | default(False) | bool

- name: debug file_values
  ansible.builtin.debug:
    var: file_values
  when: debug | default(False) | bool

- name: Fail if referenced file does not exist
  ansible.builtin.fail:
    msg: >
      "file {{ item.file_stat.key }} {{ item.file_stat.value }}" must exist and be a file
  when: >
    not item.stat.exists
  loop:
    "{{ file_values.results }}"

# Detect here if we have only the following two keys under a password
# s3.accessKey: <accessKey>
# s3.secretKey: <secret key>
# If we do, then detect it and calculate the b64 s3Secret token
# Note: the vars: line is due to https://github.com/ansible/ansible/issues/40239
- name: Check if any of the passwords has only s3.[accessKey,secretKey] and generate the combined s3Secret in that case
  ansible.builtin.set_fact:
    s3keys: "{{ s3keys | default({}) | combine({ item.key: {'s3Secret': s3secret | b64encode } }) }}"
  vars:
    s3secret: "{{ 's3.accessKey: ' + item.value['s3.accessKey'] + '\ns3.secretKey: ' + item.value['s3.secretKey'] }}"
  when:
    - '"s3.accessKey" in item.value.keys()'
    - '"s3.secretKey" in item.value.keys()'
    - '"s3Secret" not in item.value.keys()'
  loop:
    "{{ secrets | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Merge any s3Secret into the secrets dictionary if we have any
  ansible.builtin.set_fact:
    secrets: "{{ secrets | combine(s3keys) }}"
  when:
    s3keys is defined and s3keys | length > 0

# The values-secret.yaml file is in the fairly loose form of:
# secrets:
#   group1:
#     key1: value1
#     key2: value2
#   group2:
#     key1: valueA
#     key4: valueC
# The above will generate:
# vault kv put 'secret/hub/group1' key1='value1' key2='value2'
# vault kv put 'secret/hub/group2' key1='valueA' key4='valueC'
# Below we loop on the top level keys (group1, group2) and for each
# sub-top-level key (key1, key2) we create a single 'key1=value1 key2=value2' string
#
# Special note is to be given to the regex_replace which is run against each value aka password:
# A. The need for it is to quote the passwords
# B. Since it needs to cater to multiline strings (certs) and ansible offers no way
#    to specify re.DOTALL and re.MULTILINE we need to use (?ms) at the beginning
#    See https://docs.python.org/3/library/re.html and (?aiLmsux) section
#    and https://github.com/ansible/ansible/blob/devel/lib/ansible/plugins/filter/core.py#L124
# C. The \\A and \\Z match the beginning and end of a string (in case of multiline strings
#    do not want to match every line)

- name: Set defaults for vault_cmds and secret_files_vault_cmds to prevent undefined variable errors
  ansible.builtin.set_fact:
    vault_cmds: "{{ vault_cmds | default({}) }}"
    secret_files_vault_cmds: "{{ secret_files_vault_cmds | default({}) }}"

- name: Set secrets vault commands fact
  ansible.builtin.set_fact:
    vault_cmds: "{{ vault_cmds | combine({ item.key: vault_cmd}) }}"
  vars:
    vault_cmd: "vault kv put '{{ vault_path }}/{{ item.key }}'
      {{ item.value.keys() | zip(item.value.values() | map('regex_replace', '(?ms)\\A(.*)\\Z', \"'\\1'\")) | map('join', '=') | list | join(' ') }}"
  loop:
    "{{ secrets | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Set files vault commands fact
  ansible.builtin.set_fact:
    secret_files_vault_cmds: "{{ secret_files_vault_cmds | combine({ item.key: vault_cmd}) }}"
  vars:
    vault_cmd: "cat '{{ item.value | expanduser }}' | oc exec -n {{ vault_ns }} {{ vault_pod }} -it -- sh -c 'cat - > /tmp/vault_content'; oc exec -n {{ vault_ns }} {{ vault_pod }} -it -- sh -c 'base64 --wrap=0 /tmp/vault_content | vault kv put {{ vault_path }}/{{ item.key }} b64content=- content=@/tmp/vault_content; rm /tmp/vault_content'" # noqa yaml
  loop:
    "{{ file_secrets | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

- name: Debug vault commands
  ansible.builtin.debug:
    msg: "{{ vault_cmds }}"
  when: debug | default(False) | bool

- name: Debug files vault commands
  ansible.builtin.debug:
    msg: "{{ secret_files_vault_cmds }}"
  when: debug | default(False) | bool

# This step is not really needed when running make vault-init + load-secrets as
# everything is sequential
# It is needed when the vault is unsealed/configured inside the cluster and load-secrets
# gets run *while* the cronjob configures the vault. I.e. it might be half configured and return
# errors
- name: Make sure that the vault auth policy exists
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command:
      sh -c "vault list auth/{{ vault_hub }}/role | grep '{{ vault_hub }}-role'"
  register: vault_role_cmd
  until: vault_role_cmd.rc == 0
  retries: 20
  delay: 45
  changed_when: false

- name: Add the actual secrets to the vault
  kubernetes.core.k8s_exec:
    namespace: "{{ vault_ns }}"
    pod: "{{ vault_pod }}"
    command: |
      sh -c "{{ item.value }}"
  loop:
    "{{ vault_cmds | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: not debug | default(False) | bool

  # This has to be shell because of the use of stdin and pipes
- name: Add the file secrets to the vault
  ansible.builtin.shell: # noqa: command-instead-of-shell
    "{{ item.value }}"
  loop:
    "{{ secret_files_vault_cmds | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  when: not debug | default(False) | bool
