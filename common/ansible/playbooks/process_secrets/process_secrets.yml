---
- name: Parse and load secrets
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    secrets_role: 'vault_utils'
    pattern_name: 'common'
    pattern_dir: '.'
    secrets_backing_store: 'vault'
    tasks_from: 'push_parsed_secrets'
  tasks:
    - name: "Run secret-loading pre-requisites"
      ansible.builtin.include_role:
        name: '{{ item }}'
      loop:
        - cluster_pre_check
        - find_vp_secrets

    # find_vp_secrets will return a plaintext data structure called values_secrets_data
    # This will allow us to determine schema version and which backend to use
    - name: Determine how to load secrets
      ansible.builtin.set_fact:
        secrets_yaml: '{{ values_secrets_data | from_yaml }}'

    - name: Parse secrets data
      no_log: '{{ override_no_log | default(true) }}'
      parse_secrets_info:
        values_secrets_plaintext: "{{ values_secrets_data }}"
        secrets_backing_store: "{{ secrets_backing_store }}"
      register: secrets_results

    # Use the k8s secrets loader when explicitly requested
    - name: Determine role to use to load secrets
      ansible.builtin.set_fact:
        secrets_role: 'k8s_secret_utils'
        tasks_from: 'inject_k8s_secrets'
      when:
        - secrets_backing_store == "kubernetes" or secrets_backing_store == "none"
        - secrets_yaml['version'] | default('2.0') >= '2.0'

    # secrets_role will have been changed from the default if needed
    - name: Load secrets using designated role and tasks
      ansible.builtin.include_role:
        name: '{{ secrets_role }}'
        tasks_from: '{{ tasks_from }}'
      vars:
        kubernetes_secret_objects: "{{ secrets_results['kubernetes_secret_objects'] }}"
        vault_policies: "{{ secrets_results['vault_policies'] }}"
        parsed_secrets: "{{ secrets_results['parsed_secrets'] }}"
