{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/ValidatedPatterns",
  "definitions": {
    "ValidatedPatterns": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "enabled": {
          "type": "string",
          "enum": [
            "all",
            "core",
            "plumbing"
          ]
        },
        "secretStore": {
          "$ref": "#/definitions/SecretStore"
        },
        "main": {
          "$ref": "#/definitions/Main"
        },
        "global": {
          "$ref": "#/definitions/Global"
        },
        "clusterGroup": {
          "$ref": "#/definitions/ClusterGroup"
        }
      },
      "required": [
        "clusterGroup"
      ],
      "title": "ValidatedPatterns"
    },
    "SecretStore": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the external secret backend",
          "default": "vault-backend"
        },
        "kind": {
          "type": "string",
          "description": "Type of the external secret backend",
          "default": "ClusterSecretStore"
        }
      },
      "required": [
        "name",
        "kind"
      ],
      "title": "SecretsStore"
    },
    "Main": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "clusterGroupName"
      ],
      "title": "Main",
      "description": "This section contains the 'main' variables which are used by the install chart only and are passed to helm via the Makefile",
      "properties": {
        "clusterGroupName": {
          "type": "string"
        },
        "experimentalCapabilities": {
          "type": "string",
          "description": "String to enable certain experimental capabilities in the operator and the framework."
        },
        "git": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "repoURL",
            "revision"
          ],
          "properties": {
            "repoURL": {
              "type": "string",
              "description": "URL of the pattern's git repository"
            },
            "revision": {
              "type": "string",
              "description": "revision (branch/commit/ref) to use on the pattern's git repository"
            }
          }
        },
        "gitops": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "channel": {
              "type": "string",
              "description": "The channel from which to install the gitops operator"
            }
          }
        },
        "multiSourceConfig": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enable the experimental support for multi source"
            }
          }
        },
        "analyticsUUID": {
          "type": "string",
          "description": "UUID used to generate analytics"
        }
      }
    },
    "Global": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "pattern": {
          "type": "string",
          "readOnly": true,
          "description": "The name of the pattern being installed. The default is the name of the repository's folder and is automatically set by the Makefile"
        },
        "clusterDomain": {
          "type": "string",
          "readOnly": true,
          "description": "The FQDN domain of the cluster without the 'apps.' component. For example: mcg-hub.blueprints.rhecoeng.com. Gets set automatically by the framework"
        },
        "localClusterDomain": {
          "type": "string",
          "readOnly": true,
          "description": "The FQDN domain of the cluster including the 'apps.' component. For example: apps.mcg-hub.blueprints.rhecoeng.com. Gets set automatically by the framework"
        },
        "targetRevision": {
          "type": "string",
          "readOnly": true,
          "description": "revision (branch/commit/ref) to use on the pattern's git repository, it is set automatically by the pattern's operator"
        },
        "repoURL": {
          "type": "string",
          "readOnly": true,
          "description": "URL of the pattern's git repository, it is set automatically by the pattern's operator"
        },
        "hubClusterDomain": {
          "type": "string",
          "readOnly": true,
          "description": "The FQDN domain of the hub cluster including the 'apps.' component. For example: apps.mcg-hub.blueprints.rhecoeng.com. Gets set automatically by the framework. Only makes sense when using ACM"
        },
        "namespace": {
          "type": "string",
          "readOnly": true,
          "description": "The namespace in which the ArgoCD instance is running. Automatically set to either 'openshift-operators' or '$ARGOCD_APP_NAMESPACE'"
        },
        "git": {
          "$ref": "#/definitions/GlobalGit"
        },
        "options": {
          "$ref": "#/definitions/Options"
        },
        "secretStore": {
          "$ref": "#/definitions/GlobalSecretStore"
        }
      },
      "required": [
        "options"
      ],
      "title": "Global"
    },
    "GlobalSecretStore": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "backend": {
          "type": "string",
          "description": "Name of the secrets backend",
          "default": "vault"
        }
      },
      "title": "GlobalSecretsStore"
    },
    "GlobalGit": {
      "type": "object",
      "additionalProperties": true,
      "description": "The git configuration used to support Tekton pipeline tasks.",
      "properties": {
        "hostname": {
          "type": "string",
          "description": "The hostname for the Git provider being used.  e.g. github.com or gitlab.com"
        },
        "account": {
          "type": "string",
          "description": "The account for the Git provider. Accounts allow you to organize and control access to that code. There are three types of accounts on GitHub.  Personal accounts Organization accounts Enterprise accounts e.g. hybrid-cloud-patterns or claudiol"
        },
        "email": {
          "type": "string",
          "description": "The contact email for the Git account. e.g. account@gmail.com"
        },
        "dev_revision": {
          "type": "string",
          "deprecated": true,
          "description": "This is used by the pipelines as the branch for the development repository. e.g. v2.0. This is marked as deprecated"
        }
      },
      "required": [
        "hostname",
        "account",
        "email"
      ],
      "title": "GlobalGit"
    },
    "Options": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "useCSV": {
          "type": "boolean",
          "deprecated": true
        },
        "syncPolicy": {
          "type": "string",
          "description": "This is the sync policy for the ArgoCD applications. When set to Automatic ArgoCD will automatically sync an application when it detects differences between the desired manifests in Git."
        },
        "installPlanApproval": {
          "type": "string",
          "deprecated": true,
          "description": "This is used to approval strategy for the subscriptions of OpenShift Operators being installed. You can choose Automatic or Manual updates. NOTE: This setting is now available in the subcriptions description in the values file."
        },
        "applicationRetryLimit": {
          "type": "integer",
          "description": "Number of failed sync attempt retries; unlimited number of attempts if less than 0"
        }
      },
      "required": [
        "installPlanApproval",
        "syncPolicy",
        "useCSV"
      ],
      "title": "Options"
    },
    "ClusterGroup": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the cluster group."
        },
        "targetCluster": {
          "type": "string"
        },
        "isHubCluster": {
          "type": "boolean",
          "description": "If set to true the values is used to identify whether this is the hub cluster or an edge/spoke cluster configuration."
        },
        "sharedValueFiles": {
            "type": "array",
            "description": "Templated value file paths."
	},
        "namespaces": {
          "anyOf": [
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "This is the array of namespaces that the VP framework will create.  In addition, operator groups will also be created for each namespace.",
          "items": {
            "$ref": "#/definitions/Namespaces"
          }
        },
        "indexImages": {
          "anyOf": [
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "List of index images for overriding default catalog sources.",
          "items": {
            "$ref": "#/definitions/IndexImages"
          }
        },
        "operatorgroupExcludes": {
          "type": "array",
          "description": "List of namespaces to exclude the creation of operator groups.",
          "items": {
            "type": "string"
          }
        },
        "operatorgroupExcludeTargetNS": {
          "type": "array",
          "description": "Specify the list of namespaces where the target namespace field in the corresponding operatorgroup object should be excluded.",
          "items": {
            "type": "string"
          }
        },
        "hostedSite": {
          "type": "object",
          "items": {
            "$ref": "#/definitions/HostedSite"
          }
        },
        "subscriptions": {
          "anyOf": [
            {
              "type": "null"
            },
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "Description of the subscriptions that the VP Framework will install in the cluster.  Two ways of defining subscriptions: Using a list or using a dictionary.",
          "items": {
            "$ref": "#/definitions/Subscription"
          }
        },
        "projects": {
          "anyOf": [
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "The list of projects that will be created in the ArgoCD instances.",
          "items": {
            "type": "string"
          }
        },
        "applications": {
          "anyOf": [
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "Description of the applications that will be created in the ArgoCD instances. Two ways of defining applications: Using a list or using a dictionary.",
          "items": {
            "$ref": "#/definitions/Applications"
          }
        },
        "argoCD": {
          "$ref": "#/definitions/ArgoCD"
        },
        "imperative": {
          "$ref": "#/definitions/Imperative"
        },
        "managedClusterGroups": {
          "anyOf": [
            {
              "type": "array"
            },
            {
              "type": "object"
            }
          ],
          "description": "Description of the managed clusters that ACM will be able to manage. Two ways of defining managed clusters: Using a list or using a dictionary.",
          "items": {
            "$ref": "#/definitions/ManagedClusterGroup"
          }
        }
      },
      "required": [
        "applications",
        "isHubCluster",
        "name",
        "namespaces",
        "projects"
      ],
      "title": "ClusterGroup"
    },
    "Namespaces": {
      "anyOf": [
        {
          "type": "object"
        },
        {
          "type": "string"
        }
      ],
	  "description": "Description of the applications that will be created in the ArgoCD instances. The Application CRD is the Kubernetes resource object representing a deployed application instance in an environment. Two ways of defining applications: Using a list or using a dictionary.",
	  "additionalProperties": true,
	  "properties": {
         "name": {
		    "type": "string",
		    "description": "Name of the namespace."
          },
	      "labels": {
		    "type": "array",
		    "items": {
		      "$ref": "#/definitions/NameValue"
		    }
	      },
	      "annotations": {
		    "type": "array",
		    "items": {
		      "$ref": "#/definitions/NameValue"
		    }
	      }
	  }
    },
	"NameValue": {
      "type": "object",
      "description": "Description of the applications that will be created in the ArgoCD instances. The Application CRD is the Kubernetes resource object representing a deployed application instance in an environment. Two ways of defining applications: Using a list or using a dictionary.",
      "additionalProperties": true,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the namespace."
        },
        "value": {
          "type": "string",
          "description": "Name of the namespace."
        }
	  }
	},
    "Applications": {
      "type": "object",
      "description": "Description of the applications that will be created in the ArgoCD instances. The Application CRD is the Kubernetes resource object representing a deployed application instance in an environment. Two ways of defining applications: Using a list or using a dictionary.",
      "additionalProperties": true,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the application in ArgoCD."
        },
        "repoURL": {
          "type": "string",
          "description": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests."
        },
        "targetRevision": {
          "type": "string",
          "description": "TargetRevision defines the revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.  In case of Helm, this is a semver tag for the Chart's version."
        },
        "chart": {
          "type": "string",
          "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo."
        },
        "chartVersion": {
          "type": "string",
          "description": "The version of the helm chart to be used. Can be a regex like '0.0.*'."
        },
        "kustomize": {
          "type": "boolean",
          "description": "If set to true it will tell ArgoCD to use kustomize to deploy the application."
        },
        "plugin": {
          "type": "object",
          "description": "Plugin holds config management plugin specific options"
        },
        "extraValueFiles": {
          "type": "array",
          "description": "List of extra values files that will be passed to ArgoCD."
        },
        "extraHubClusterDomainFields": {
          "type": "array",
          "description": "List of extra fields that will be passed to ArgoCD."
        },
        "extraLocalClusterDomainFields": {
          "type": "array",
          "description": "List of extra fields that will be passed to ArgoCD."
        },
        "extraRepoURLFields": {
          "type": "array",
          "description": "List of extra fields that will be passed to ArgoCD."
        },
        "extraTargetRevisionFields": {
          "type": "array",
          "description": "List of extra fields that will be passed to ArgoCD."
        },
        "extraNamespaceFields": {
          "type": "array",
          "description": "List of extra fields that will be passed to ArgoCD."
        },
        "extraPatternNameFields": {
          "type": "array",
          "description": "List of extra fields that will be passed to ArgoCD."
        },
        "overrides": {
          "type": "object"
        },
        "fileParameters": {
          "type": "array",
          "description": "FileParameters are file parameters to the helm template"
        },
        "ignoreDifferences": {
          "type": "array",
          "description": "IgnoreDifferences is a list of resources and their fields which should be ignored during comparison"
        },
        "syncPolicy": {
          "type": "object",
          "description": "SyncPolicy controls when and how a sync will be performed"
        },
        "namespace": {
          "type": "string",
          "description": "Namespace specifies the target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace"
        },
        "project": {
          "type": "string",
          "description": "Project is a reference to the project this application belongs to. The empty string means that application belongs to the 'default' project."
        },
        "path": {
          "type": "string",
          "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git."
        }
      },
      "required": [
        "name",
        "path",
        "project"
      ],
      "title": "Applications"
    },
    "ArgoCD": {
      "type": "object",
      "description": "Details for configuring ArgoCD instances in particular",
      "additionalProperties": false,
      "properties": {
        "configManagementPlugins": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgoCDConfigManagementPlugin"
          },
          "description": "The new configManagementPlugins array, will also generate configMaps to inject into the plugins"
        },
        "initContainers": {
          "type": "array",
          "description": "A list of initContainers to add to the repo-server if needed"
        }
      }
    },
    "ArgoCDConfigManagementPlugin": {
      "type": "object",
      "additionalProperties": true,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the config management plugin"
        },
        "image": {
          "type": "string",
          "description": "Image for a sidecar container"
        },
        "imagePullPolicy": {
          "type": "string",
          "description": "Image pull policy for the sidecar. Defaults to 'Always'"
        },
        "pluginConfig": {
          "type": "string",
          "description": "Configuration file to project into sidecar container. This will create a configMap if specified"
        },
        "pluginArgs": {
          "type": "array",
          "description": "Additional args to pass to the cmpserver command, usually loglevel"
        }
      },
      "required": [
        "name",
        "image"
      ]
    },
    "IndexImages": {
      "type": "object",
      "description": "Details for overriding default catalog sources",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "Name for the custom catalog source."
        },
        "image": {
          "type": "string",
          "description": "Location of the index image."
        }
      }
    },
    "HostedSite": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "secretsPath": {
          "type": "string",
          "description": "It represents the path in the vault that is supposed to contain two fields: 'bearerToken' representing the token to use to authenticate to the remote cluster and 'caCert' which is the base64-encoded Certificate Authority cert of the remote cluster."
        }
      },
      "required": [
        "secretsPath"
      ],
      "title": "HostedSite"
    },
    "Imperative": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          }
        },
        "image": {
          "type": "string",
          "default": "registry.redhat.io/ansible-automation-platform-22/ee-supported-rhel8:latest"
        },
        "namespace": {
          "type": "string",
          "default": "imperative",
          "enum": [
            "imperative"
          ]
        },
        "serviceAccountCreate": {
          "type": "boolean"
        },
        "valuesConfigMap": {
          "type": "string"
        },
        "cronJobName": {
          "type": "string"
        },
        "jobName": {
          "type": "string"
        },
        "imagePullPolicy": {
          "type": "string",
          "default": "Always",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ]
        },
        "activeDeadlineSeconds": {
          "type": "integer",
          "default": 3600
        },
        "schedule": {
          "type": "string",
          "default": "*/10 * * * *"
        },
        "insecureUnsealVaultInsideClusterSchedule": {
          "type": "string",
          "default": "*/5 * * * *"
        },
        "verbosity": {
          "type": "string",
          "default": "",
          "enum": [
            "",
            "-v",
            "-vv",
            "-vvv",
            "-vvvv"
          ]
        },
        "serviceAccountName": {
          "type": "string"
        },
        "clusterRoleName": {
          "type": "string"
        },
        "clusterRoleYaml": {
          "type": ["string", "array"]
        },
        "roleName": {
          "type": "string"
        },
        "roleYaml": {
          "type": "string"
        },
        "adminServiceAccountCreate": {
          "type": "boolean"
        },
        "adminServiceAccountName": {
          "type": "string"
        },
        "adminClusterRoleName": {
          "type": "string"
        }
      },
      "required": [
        "jobs"
      ],
      "title": "Imperative"
    },
    "Job": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "playbook": {
          "type": "string"
        },
        "timeout": {
          "type": ["integer", "string"]
        },
        "image": {
          "type": "string",
          "default": "registry.redhat.io/ansible-automation-platform-22/ee-supported-rhel8:latest"
        },
        "tags": {
          "type": "string"
        },
        "extravars": {
          "type": "array"
        },
        "verbosity": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "playbook"
      ],
      "title": "Job"
    },
    "ManagedClusterGroup": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "targetRevision": {
          "type": "string"
        },
        "acmlabels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ACMLabels"
          }
        },
        "hostedArgoSites": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HostedArgoSites"
          }
        },
        "clusterPools": {
          "type": "object",
          "items": {
            "$ref": "#/definitions/ClusterPools"
          }
        },
        "clusterSelector": {
          "type": "object",
          "additionalProperties": true
        },
        "helmOverrides": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HelmOverride"
          }
        }
      },
      "required": [],
      "title": "ManagedClusterGroup"
    },
    "ClusterPools": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "size": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "openshiftVersion": {
          "type": "string"
        },
        "baseDomain": {
          "type": "string"
        },
        "platform": {
          "type": "object",
          "$ref": "#/definitions/ClusterPoolsPlatform"
        },
        "clusters": {
          "type": "array"
        }
      },
      "required": [
        "name",
        "openshiftVersion",
        "baseDomain",
        "platform",
        "clusters"
      ],
      "title": "ClusterPools"
    },
    "ClusterPoolsPlatform": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "baseDomainResourceGroupName": {
          "type": "string"
        },
        "region": {
          "type": "string"
        }
      },
      "required": [
        "region"
      ],
      "title": "ClusterPoolsPlatform"
    },
    "HelmOverride": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ]
        }
      },
      "required": [
        "name",
        "value"
      ],
      "title": "HelmOverride"
    },
    "ACMLabels": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "title": "ACMLabels"
    },
    "Subscription": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "namespaces": {
          "type": "array"
        },
        "namespace": {
          "type": "string"
        },
        "sourceNamespace": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "csv": {
          "type": "string"
        },
        "installPlanApproval": {
          "type": "string",
          "enum": [
            "Manual",
            "Automatic"
          ]
        },
        "config": {
          "type": "object",
          "$ref": "#/definitions/SubscriptionsConfigEnv"
        },
        "disabled": {
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "title": "Subscription"
    },
    "SubscriptionsConfigEnv": {
      "type": "array",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "title": "SubscriptionsConfigEnv"
    },
    "HostedArgoSites": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "bearerKeyPath": {
          "type": "string"
        },
        "caKeyPath": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "domain"
      ],
      "title": "HostedArgoSites"
    }
  }
}
